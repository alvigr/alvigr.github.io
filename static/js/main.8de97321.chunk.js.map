{"version":3,"sources":["components/Tile.js","components/Tiles.js","actions.js","containers/TilesSet.js","containers/ControlPanel.js","components/App.js","serviceWorker.js","reducers.js","store.js","index.js"],"names":["Tile","tile","onTileClick","i","color","paired","frontSide","className","isOpen","onClick","style","backgroundColor","Tiles","tiles","areaWidth","length","width","map","key","reset","numOfTiles","type","TilesSet","connect","state","dispatch","index","openTile","ControlPanel","App","Boolean","window","location","hostname","match","action","checkPair","indexes","includes","push","rcolor","uniqby","concat","shuffle","finish","store","createStore","reducer","applyMiddleware","next","getState","filter","t","firstTile","findIndex","timeoutId","setTimeout","clearTimeout","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8de97321.chunk.js","sourcesContent":["import React from 'react';\nimport './Tile.css';\n\nconst Tile = ({ tile, onTileClick, i }) => {\n  const { color, paired } = tile || {};\n  const frontSide = paired ? '#c4c4c4' : '#e0e0e0';\n  return (\n    <>\n    <div className=\"scene scene--tile\">\n      <div\n        className={`tile ${tile.isOpen && 'is-flipped'}`}\n        onClick={paired ? () => false : () => onTileClick(i)}\n      >\n        <div\n          style={{ backgroundColor: frontSide }} \n          className=\"tile_face\" \n        />\n        <div\n          style={{ backgroundColor: color }}\n          className=\"tile_face tile_face--back\"\n        />\n      </div>\n    </div>\n    </>\n  );\n};\n\nexport default Tile;\n","import React from 'react';\nimport Tile from './Tile';\nimport './Tiles.css';\n\nconst Tiles = ({ tiles, onTileClick }) => {\n  const areaWidth = tiles.length === 16 ? '432px' : '648px';\n  return (\n    <div className=\"tiles-container\">\n      <div className=\"tiles-area\" style={{ width: areaWidth }}> \n        {tiles.map((tile, i) => (\n          <Tile\n            key={`tile-${i}`}\n            tile={tile}\n            onTileClick={onTileClick}\n            i={i}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default Tiles;\n","export const openTile = index => (\n  {\n    type: 'OPEN_TILE',\n    index,\n  }\n);\n\nexport const reset = numOfTiles => (\n  {\n    type: 'RESET',\n    numOfTiles,\n  }\n);\n\nexport const checkPair = indexes => (\n  {\n    type: 'CHECK_PAIR',\n    indexes,\n  }\n);\n\nexport const finish = () => (\n  {\n    type: 'FINISH'\n  }\n);\n","import { connect } from 'react-redux';\nimport Tiles from '../components/Tiles';\nimport { openTile } from '../actions';\n\nconst mapStateToProps = state => ({ tiles: state });\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onTileClick: index => dispatch(openTile(index)),\n  }\n}\n\nconst TilesSet = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Tiles);\n\nexport default TilesSet;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { reset } from '../actions';\nimport './ControlPanel.css';\n\nconst Control = ({ dispatch }) => {\n  dispatch(reset(16));\n  return (\n    <div className=\"conttrol-panel\">\n      <button className=\"btn\" onClick={() => dispatch(reset(16))}><span className=\"restart restart-4\" /></button>\n      <button className=\"btn\" onClick={() => dispatch(reset(36))}><span className=\"restart restart-6\" /></button>\n    </div>\n  );\n}\n\nconst ControlPanel = connect()(Control);\n\nexport default ControlPanel;\n","import React from 'react';\nimport TilesSet from '../containers/TilesSet';\nimport ControlPanel from '../containers/ControlPanel';\n\nconst App = () => {\n  return (\n    <div>\n      <ControlPanel />\n      <TilesSet />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import rcolor from 'rcolor';\nimport shuffle from 'lodash.shuffle';\nimport uniqby from 'lodash.uniqby';\n\nconst openTile = (state, action) => {\n  return state.map((tile, index) => {\n    if (index === action.index) {\n      return {\n        ...tile,\n        isOpen: true,\n      };\n    }\n    return tile;\n  });\n};\n\nconst checkPair = (state, action) => {\n  const paired =\n    state[action.indexes[0]].color === state[action.indexes[1]].color;\n  return state.map((tile, index) => {\n    if (action.indexes.includes(index)) {\n      return {\n        ...tile,\n        isOpen: false,\n        paired,\n      };\n    }\n    return tile;\n  });\n};\n\nconst reset = (state, action) => {\n  const numOfTiles = action.numOfTiles;\n  let tiles = [];\n  while (tiles.length < numOfTiles / 2) {\n    for (let i = numOfTiles / 2; i > 0; i--) {\n      tiles.push(\n        {\n          isOpen: false,\n          color: rcolor(),\n          paired: false,\n        },\n      );\n    }\n    tiles = uniqby(tiles, 'color'); \n  }\n  tiles = tiles.concat(tiles);\n  return shuffle(tiles);\n};\n\nconst finish = (state, action) => {\n  return state.map(tile => {\n    return {\n      ...tile,\n      isOpen: true,\n    };\n  });\n};\n\nconst tiles = (state = [], action) => {\n  switch (action.type) {\n    case 'OPEN_TILE':\n      return openTile(state, action);\n    case 'CHECK_PAIR':\n      return checkPair(state, action);\n    case 'RESET':\n      return reset(state, action);\n    case 'FINISH':\n      return finish(state, action);\n    default:\n      return state; \n  }\n};\n\nexport default tiles;\n","import { createStore, applyMiddleware } from 'redux';\nimport reducer from './reducers';\nimport { checkPair, finish } from './actions';\n\nexport const pairChecker = store => next => action => {\n  const tiles = store.getState();\n\n  if (action.type === 'OPEN_TILE') {\n    if (tiles.filter(t => t.isOpen).length === 2) return\n\n    const firstTile = tiles.findIndex(tile => tile.isOpen);\n\n    if (firstTile !== -1 && firstTile !== action.index) {\n      store.dispatch(checkPair([firstTile, action.index]));\n    }\n\n    return next(action);\n  }\n\n  if (action.type === 'CHECK_PAIR') {\n    const timeoutId = setTimeout(\n      () => next(action),\n      1000\n    );\n    return function cancel() {\n      clearTimeout(timeoutId);\n    }\n  }\n\n  return next(action);\n};\n\nexport const finishChecker = store => next => action => {\n  const tiles = store.getState();\n\n  if (action.type === 'CHECK_PAIR') {\n    const isFinish = tiles.filter(t => t.paired).length + 2 === tiles.length;\n    if (isFinish) {\n      return store.dispatch(finish()) \n    }\n    return next(action)\n  }\n  return next(action);\n};\n\n\nconst store = createStore(\n  reducer,\n  applyMiddleware(pairChecker, finishChecker)\n);\n\nexport default store;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}